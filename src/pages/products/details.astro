---
import Layout from "src/layouts/Layout.astro";
import boxSize from "@icons/box-size.svg";
import { config } from "config";
import { showLoaderString, removeLoaderString } from "src/utils/loader";

const getApiUrl = config.apiUrl; // Obtener la URL de la API aquí
const productosUrl = config.endpoints.productos;
---

{/*Details de productos */}
<Layout title="Product Details">
  <div class="w-full">
    {/* Hero Banner */}
    <div
      class="pt-32 md:pt-40 pb-1 md:pb-16 bg-gradient-to-b from-teal-700 to-teal-400 text-white relative overflow-hidden"
    >
      <div class="max-w-6xl md:w-1/2 px-4 md:px-6 py-8 md:py-12 relative z-10">
        <div class="flex items-center gap-2 mb-2">
          <div class="w-5 md:w-6 h-5 md:h-6">
            <svg viewBox="0 0 24 24" fill="currentColor" class="w-full h-full">
              <path d="M5 13l4 4L19 7"></path>
            </svg>
          </div>
          <h2 class="text-xl md:text-2xl font-bold" id="product-title">
            Título Producto
          </h2>
        </div>
        <h1
          class="text-2xl md:text-4xl font-bold mb-6 md:mb-8"
          id="product-subtitle"
        >
          Subtitulo Producto
        </h1>
        <button
          class="bg-white text-teal-500 px-8 md:px-12 py-2 md:py-3 rounded-full font-bold text-lg md:text-xl hover:bg-opacity-90 transition"
        >
          ¡COTÍZALO!
        </button>
      </div>
      <div
        class="hidden md:block absolute right-0 top-32 w-full md:w-1/2 h-full bg-white rounded-bl-[30%] md:rounded-bl-[50%] rounded-tl-[40%] md:rounded-tl-[60%] rounded-tr-[15%] md:rounded-tr-[25%] items-center justify-center"
      >
        <img
          id="product-img"
          src=""
          alt=""
          class="w-3/4 md:w-4/5 h-3/4 md:h-4/5 object-contain mx-auto my-auto"
        />
      </div>
    </div>

    {/* Main Content */}
    <div class="max-w-6xl mx-auto px-4 md:px-6 py-6 md:py-8">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 md:gap-8">
        {/* Left Column - Gallery */}
        <div class="space-y-4">
          {/* Imagen principal */}
          <div
            class="md:max-w-[440px] aspect-square bg-gray-100 rounded-lg overflow-hidden"
          >
            <img
              id="product-viewer"
              src=""
              alt=""
              class="w-full h-full object-contain"
            />
          </div>

          {/* Grid de miniaturas */}
          <div
            class="grid grid-cols-4 gap-2 w-full md:max-w-[440px]"
            id="images-list"
          >
          </div>
        </div>

        {/* Right Column - Product Info */}
        <div>
          <div class="mb-6">
            <h3 class="text-xl font-bold mb-2" id="info-title">
              {/* Información del producto: */}
            </h3>
            <p class="text-gray-700" id="info-description"></p>
          </div>

          <div class="border rounded-lg mb-6">
            <div class="flex border-b">
              <a
                class={`flex-1 p-4 font-bold text-teal-500 border-b-2 border-teal-500`}
              >
                Detalles del producto
              </a>
            </div>
            <div class="p-6">
              <h3 class="font-bold mb-2">Descripción:</h3>
              <!-- lista de especificaciones -->
              <ul class="space-y-2 text-gray-700" id="specs-list"></ul>
              <h3 class="font-bold mt-4 mb-2">Dimensiones:</h3>
              <div class="flex items-start gap-8">
                <div class="w-24">
                  <img src={boxSize.src} alt="Box Size" class="w-full h-auto" />
                </div>
                <!-- dimensiones del producto -->
                <ul class="space-y-2" id="product-dimensions"></ul>
              </div>
            </div>
          </div>

          <button
            class="w-full bg-teal-500 text-white py-4 rounded-full font-bold text-xl hover:bg-teal-600 transition hover:cursor-pointer"
          >
            COTIZACIÓN
          </button>
        </div>
      </div>

      {/* Similar Products */}
      <div class="mt-8 md:mt-12">
        <h2 class="text-xl md:text-2xl font-bold mb-4 md:mb-6 text-teal-500">
          ARTÍCULOS SIMILARES
        </h2>
        <div
          class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4 md:gap-6"
          id="related-products-container"
        >
        </div>
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ getApiUrl, productosUrl, showLoaderString, removeLoaderString }}>
  eval(showLoaderString)
  eval(removeLoaderString)
  document.addEventListener("DOMContentLoaded", async () => {
    showLoader();
    const params = new URLSearchParams(window.location.search);
    const idProduct = params.get("id")?.trim();
    if (!idProduct) return;

    try {
      const response = await fetch(
        `${getApiUrl}${productosUrl.list}/${idProduct}`
      );

      if (!response.ok) {
        removeLoader();
        const container = document.createElement("div");
        container.className =
          "fixed z-50 inset-0 text-center bg-linear-to-b from-teal-700 to-teal-400 screen content-center";

        const message = document.createElement("p");
        message.className = "text-white font-extrabold text-5xl";
        message.textContent = `Error ${response.status}: ${response.statusText} Producto no encontrado`;

        container.appendChild(message);

        document.body.appendChild(container);
      }

      removeLoader();
      const data = await response.json();
      const product = data.data;

      const productTitle = document.getElementById("product-title");
      if (!productTitle) return;
      const productSubtitle = document.getElementById("product-subtitle");
      if (!productSubtitle) return;
      const productImg = document.getElementById("product-img");
      if (!productImg) return;
      const productViewer = document.getElementById("product-viewer");
      if (!productViewer) return;
      const imagesList = document.getElementById("images-list");
      const images = product.images;
      if (images.length > 0) {
        productViewer.src = images[0];
        productViewer.alt = `Thumbnail 1`;
      }
      if (!imagesList) return;
      const infoTitle = document.getElementById("info-title");
      if (!infoTitle) return;
      const infoDescription = document.getElementById("info-description");
      if (!infoDescription) return;
      const specsList = document.getElementById("specs-list");
      const specs = product.specs;
      if (!specsList) return;
      const productDimension = document.getElementById("product-dimensions");
      const dimensions = product.dimensions;
      if (!productDimension) return;
      productTitle.innerHTML = `${product.title}`;
      productSubtitle.innerHTML = `${product.subtitle}`;
      productImg.src = `${product.image}`;
      productImg.alt = `${product.title}`;
      images.slice(0, 4).forEach((image, index) => {
        const alt = `Thumbnail ${index + 1}`;
        const div = document.createElement("div");
        div.className =
          "aspect-square bg-gray-100 rounded-lg overflow-hidden cursor-pointer opacity-80 hover:opacity-100 hover:scale-105 transition-all duration-300 ease-in-out hover:cursor-pointer";

        const img = document.createElement("img");
        img.src = image;
        img.alt = alt;
        img.className = "w-full h-full object-cover";

        div.appendChild(img);
        imagesList.appendChild(div);

        div.onclick = () => {
          productViewer.src = image;
          productViewer.alt = alt;
        };
      });
      infoTitle.innerHTML = `${product.title}`;
      infoDescription.innerHTML = `${product.description}`;
      Object.entries(specs).forEach(([key, value]) => {
        const li = document.createElement("li");
        li.textContent = `${key}: ${value}`;
        specsList.appendChild(li);
      });
      Object.entries(dimensions).forEach(([key, value]) => {
        const li = document.createElement("li");
        li.className = "flex items-center gap-2";
        const span = document.createElement("span");
        span.className =
          "w-5 h-5 bg-teal-500 rounded-full flex items-center justify-center text-white text-xs font-bold";
        span.textContent = key.charAt(0).toUpperCase();
        const text = document.createTextNode(`${key}: ${value}`);
        li.appendChild(span);
        li.appendChild(text);
        productDimension.appendChild(li);
      });
      const relatedProductsContainer = document.getElementById(
        "related-products-container"
      );
      const relProd = product.relatedProducts;
      if (!relatedProductsContainer) return;
      const relatedProducts = await Promise.all(
        relProd.map(async (id) => {
          const res = await fetch(`${getApiUrl}${productosUrl.list}/${id}`);
          if (!res.ok) return null;
          const data = await res.json();
          return data.data;
        })
      ).then((results) => results.filter((p) => p !== null));
      relatedProducts.forEach((prod) => {
        const a = document.createElement("a");
        a.href = `/products/details?id=${prod.id}`;
        a.className = "group cursor-pointer";

        const div = document.createElement("div");
        div.className =
          "aspect-video bg-gray-100 rounded-lg overflow-hidden mb-2";

        const img = document.createElement("img");
        img.src = prod.image;
        img.alt = prod.title;
        img.className =
          "w-full h-full object-cover group-hover:scale-105 transition";

        const h3 = document.createElement("h3");
        h3.className = "text-center font-bold text-xs md:text-sm";
        h3.textContent = prod.title;

        div.appendChild(img);
        a.appendChild(div);
        a.appendChild(h3);

        relatedProductsContainer.appendChild(a);
      });
    } catch (error) {
      console.error("Error fetching product:", error);
      const container = document.getElementById("product-container");
      if (!container) return;
      container.innerHTML = `<p>Error: ${error.message}</p>`;
    }
  });
</script>
