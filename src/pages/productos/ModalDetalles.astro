---
interface ModalProps {
  seccion?: string;
  link?: string;
}

const numeroWhatsApp = "51978883199";

// Objeto con las rutas de imágenes para cada producto
const linkImages: Record<string, string> = {
  "soldadora-lingba": "/images/popup/soldadora-lingba.webp",
  "purificador-de-agua": "/images/popup/purificador-de-agua.webp",
  "maquina-de-embalaje-de-te": "/images/popup/maquina-de-embalaje-de-te.webp",
  "maquina-selladora-de-bolsas-para-solidos":"/images/popup/maquina-selladora-de-bolsas-para-solidos.webp",
  "mesa-led-bar-alta-cuadrada": "/images/popup/mesa-led-bar-alta-cuadrada.webp",
  "mesa-led-bar-alta": "/images/popup/mesa-led-bar-alta.webp",
  "selladora-por-induccion": "/images/popup/selladora-por-induccion.webp",
  "selladora-de-vaso-manual": "/images/popup/selladora-de-vaso-manual.webp",
  "silla-bar-led-alta": "/images/popup/silla-bar-led-alta.webp",
  "sillas-cuadradas-o-de-cubo": "/images/popup/sillas-cuadradas-o-de-cubo.webp",
  "soldadora-spark-mig-250": "/images/popup/soldadora-spark-mig-250.webp",
  "ventilador-holografico": "/images/popup/ventilador-holografico.webp",
  "maquina-selladora-de-bolsas-para-liquidos":"/images/popup/maquina-selladora-de-bolsas-para-liquidos.webp",

  // Agrega más productos aquí según necesites
  default: "/images/popup/default.webp",
};

const { link = "" } = Astro.props as ModalProps;
const modalImage = linkImages[link] || linkImages["default"];
---

<!-- Modal -->
<div
  id="modal-cotizacion-producto"
  class="fixed inset-0 bg-black/60 z-50 flex items-center justify-center px-4 hidden"
>
  <div
    class="bg-white flex flex-col sm:flex-row overflow-hidden shadow-2xl w-[90%] max-w-md sm:max-w-3xl relative animate-slideIn rounded-xl"
  >
    <!-- Contenedor de imagen - Modificado para centrar y ajustar correctamente -->
    <div
      class="hidden sm:flex w-2/4 relative justify-center items-center bg-gray-100 overflow-hidden"
    >
      <div class="w-full h-full flex justify-center items-center p-0">
        <img
          id="modal-product-img"
          src={modalImage}
          alt={`Imagen para ${link}`}
          title={`Imagen para ${link}`}
          class="h-full w-auto object-cover"
          loading="lazy"
          onerror="this.onerror=null; this.src='/images/popup/default.webp'"
        />
      </div>
    </div>

    <!-- Formulario dinámico -->
    <div
      id="modal-form-container"
      class="w-full sm:w-3/5 p-6 text-white relative"
      data-product-link={link}
      data-seccion={Astro.props.seccion}
      data-whatsapp={numeroWhatsApp}
    >
      <div class="py-6 sm:py-10 mx-2 sm:mx-8 min-h-[420px]">
        <button
          id="close-modal-cotizacion"
          aria-label="Cerrar modal"
          class="absolute top-4 right-5 text-md text-white hover:text-gray-300 cursor-pointer"
        >
          X
        </button>

        <h2
          id="modal-title"
          class="text-xl sm:text-3xl font-bold text-center sm:mt-3 mb-4 select-none"
        >
        </h2>

        <form id="form-cotizacion-producto" class="flex flex-col gap-1">
          <label class="text-base sm:text-lg font-bold select-none">Nombre</label>
          <input
            type="text"
            name="nombre"
            class="p-2 rounded-lg bg-white text-black outline-none mb-1"
            placeholder="Nombre y Apellidos"
            required
          />

          <label class="text-base sm:text-lg font-bold select-none">Teléfono</label>
          <input
            type="tel"
            name="telefono"
            class="p-2 rounded-lg bg-white text-black outline-none mb-1"
            placeholder="Teléfono: 905 876 524"
            required
          />

          <label class="text-base sm:text-lg font-bold select-none">Correo</label>
          <input
            type="email"
            name="correo"
            class="p-2 rounded-lg bg-white text-black outline-none mb-1"
            placeholder="Correo@gmail.com"
            required
          />
          <button
            id="modal-submit-btn"
            type="submit"
            class="mt-4 py-2 rounded-lg text-white font-bold transition-colors"
          >
            buttonText
          </button>
        </form>
        <p id="modal-cotizacion-mensaje" class="text-center mt-4"></p>
      </div>
    </div>
  </div>
</div>

<script>

  import { config } from "config";

  declare global {
    interface Window {
      __detalleProductoSeccion?: string;
      __detalleProducto?: any;
    }
  }

  // --- CONFIGURACIÓN POR SECCIÓN ---
  const secciones = {
    NEGOCIOS: {
      gradient: "from-sky-400 to-sky-600",
      title:
        "DESCARGA MÁS INFORMACIÓN GRATIS",
      btn: "bg-sky-400 hover:bg-sky-500 cursor-pointer",
      buttonText: "¡SÍ, QUIERO CRECER!",
    },
    MAQUINARIA: {
      gradient: "from-emerald-400 to-teal-600",
      title:
        "DESCARGA TU <span class='scrollmodal-title'>GUÍA TÉCNICA GRATIS</span>",
      btn: "bg-emerald-400 hover:bg-emerald-500 cursor-pointer",
      buttonText: "¡SÍ, QUIERO MI GUÍA!",
    },
    DECORACIÓN: {
      gradient: "from-violet-500 to-indigo-700",
      title:
        "TU GUÍA DE DECORACIÓN EXCLUSIVA, GRATIS",
      btn: "bg-violet-500 hover:bg-violet-600 cursor-pointer",
      buttonText: "¡SÍ, QUIERO CRECER!",
    },
  };

  // Objeto con las rutas de imágenes para cada producto (fallback)
  const linkImages: Record<string, string> = {
    "soldadora-lingba": "/images/popup/soldadora-lingba.webp",
    "purificador-de-agua": "/images/popup/purificador-de-agua.webp",
    "maquina-de-embalaje-de-te": "/images/popup/maquina-de-embalaje-de-te.webp",
    "maquina-selladora-de-bolsas-para-solidos":"/images/popup/maquina-selladora-de-bolsas-para-solidos.webp",
    "mesa-led-bar-alta-cuadrada":"/images/popup/mesa-led-bar-alta-cuadrada.webp",
    "mesa-led-bar-alta": "/images/popup/mesa-led-bar-alta.webp",
    "selladora-por-induccion": "/images/popup/selladora-por-induccion.webp",
    "selladora-de-vaso-manual": "/images/popup/selladora-de-vaso-manual.webp",
    "silla-bar-led-alta": "/images/popup/silla-bar-led-alta.webp",
    "sillas-cuadradas-o-de-cubo": "/images/popup/sillas-cuadradas-o-de-cubo.webp",
    "soldadora-spark-mig-250": "/images/popup/soldadora-spark-mig-250.webp",
    "ventilador-holografico": "/images/popup/ventilador-holografico.webp",
    "maquina-selladora-de-bolsas-para-liquidos":"/images/popup/maquina-selladora-de-bolsas-para-liquidos.webp",

    // Agrega más productos aquí según necesites
    default: "/images/popup/default.webp",
  };

  const container = document.getElementById("modal-form-container");
  const numeroWhatsApp = container?.dataset.whatsapp ?? "51978883199";

  let sectionConfig = secciones.NEGOCIOS;

  // --- LÓGICA DE MOSTRAR / CERRAR ---
  const MODAL_STORAGE_KEY = "asesoriaModalLastClosedDetalle";
  const MODAL_COOLDOWN_MS = 3 * 60 * 1000; // 3 minutos
  let modalTimeout: ReturnType<typeof setTimeout> | null = null;
  let modalMostrado = false;
  let scrollActivado = false;

  function showCotizacionModal() {
    aplicarConfig();
    actualizarImagenDesdeLink();
    const modal = document.getElementById("modal-cotizacion-producto");
    const mensaje = document.getElementById("modal-cotizacion-mensaje");
    if (modal && mensaje) {
      modal.classList.remove("hidden");
      mensaje.textContent = "";
      modalMostrado = true;
    }
  }

  /**
   * Actualiza la imagen del modal popup desde la API del producto.
   * 
   * Prioridad de imágenes:
   * 1. Imagen con tipo='popup' desde producto_imagenes (subida desde el admin)
   * 2. Imagen hardcodeada en linkImages (fallback para productos antiguos)
   * 3. Imagen default
   */
  function actualizarImagenDesdeLink() {
    const container = document.getElementById("modal-form-container");
    const modalImg = document.getElementById(
      "modal-product-img"
    ) as HTMLImageElement | null;

    if (!container || !modalImg) return;

    const productLink = container.dataset.productLink || "";
    console.log("Link del producto desde dataset:", productLink);

    // Intentar obtener la imagen desde el producto cargado en la API
    let imagen = linkImages["default"];
    let imagenAlt = "Imagen por defecto";

    if (window.__detalleProducto) {
      const producto = window.__detalleProducto;
      // Buscar imagen con tipo 'popup' en producto_imagenes
      const imagenPopup = producto.producto_imagenes?.find(
        (img: any) => img.tipo === 'popup'
      );
      
      if (imagenPopup?.url_imagen) {
        imagen = `${config.apiUrl}${imagenPopup.url_imagen}`;
        imagenAlt = imagenPopup.texto_alt_SEO || producto.nombre || "Imagen del producto";
        console.log("Imagen popup encontrada desde API:", imagen);
      } else {
        // Fallback: usar imagen hardcodeada si existe, sino usar default
        imagen = linkImages[productLink] || linkImages["default"];
        imagenAlt = `Imagen para ${productLink}`;
        console.log("Usando imagen hardcodeada o default:", imagen);
      }
    } else {
      // Si no hay producto cargado, usar imagen hardcodeada
      imagen = linkImages[productLink] || linkImages["default"];
      imagenAlt = `Imagen para ${productLink}`;
      console.log("Producto no cargado, usando imagen hardcodeada:", imagen);
    }

    // Verificar si la imagen existe
    const testImage = new Image();
    testImage.onload = function () {
      modalImg.src = imagen;
      modalImg.alt = imagenAlt;
    };
    testImage.onerror = function () {
      console.error("Error al cargar la imagen:", imagen);
      modalImg.src = linkImages["default"];
      modalImg.alt = "Imagen por defecto";
    };
    testImage.src = imagen;
  }

  function puedeMostrarModal() {
    const lastClosed = parseInt(
      localStorage.getItem(MODAL_STORAGE_KEY) || "0",
      10
    );
    return Date.now() - lastClosed >= MODAL_COOLDOWN_MS;
  }

  function programarModal() {
    if (modalTimeout) clearTimeout(modalTimeout);
    if (puedeMostrarModal() && !modalMostrado) {
      modalTimeout = setTimeout(() => showCotizacionModal(), 2000);
    }
  }

  const closeBtn = document.getElementById("close-modal-cotizacion");
  if (closeBtn) {
    closeBtn.onclick = () => {
      const modal = document.getElementById("modal-cotizacion-producto");
      if (modal) modal.classList.add("hidden");
      localStorage.setItem(MODAL_STORAGE_KEY, Date.now().toString());
      modalMostrado = false;
    };
  }

  // --- FORMULARIO ---
  const form = document.getElementById(
    "form-cotizacion-producto"
  ) as HTMLFormElement | null;
  if (form) {
    form.onsubmit = async (e) => {
      e.preventDefault();
      const data = new FormData(form);
      const nombre = data.get("nombre");
      const telefono = "+51 " + data.get("telefono");
      const correo = data.get("correo");
      const productLink = document.getElementById("modal-form-container")?.dataset.productLink;

      const mensaje = `Hola, me llamo ${nombre}. Teléfono: ${telefono}, Correo: ${correo}. Me interesa recibir asesoría.`;
      /* window.open(
        `https://wa.me/${numeroWhatsApp}?text=${encodeURIComponent(mensaje)}`,
        "_blank"
      ); */

      try {
        const responseWhatsApp = await fetch(`${config.apiUrl}${config.endpoints.whatsapp.sendMessageAccept}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            telefono: telefono,
            comentario: mensaje,
          }),
        });

        if (responseWhatsApp.ok) {
          const responseData = await responseWhatsApp.json();
          console.log('Mensaje enviado con éxito:', responseData);
        } else {
          const errorData = await responseWhatsApp.json();
          console.error('Error al enviar mensaje:', errorData);
        }
      } catch (error) {
        console.error('Error al enviar mensaje a WhatsApp:', error);
      }


      const mensajeEl = document.getElementById("modal-cotizacion-mensaje");
      if (mensajeEl) mensajeEl.textContent = "Enviado a WhatsApp ✅";

      try {
        const response = await fetch(`${config.apiUrl}${config.endpoints.email.sendEmailByProductLink}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            name: nombre,
            celular: telefono,
            email: correo,
            link: productLink
          }),
        });

        if (response.ok) {
          const mensajeEl = document.getElementById("modal-cotizacion-mensaje");
          if (mensajeEl) mensajeEl.textContent = "Correo enviado con éxito ✅";
        } else {
          const mensajeEl = document.getElementById("modal-cotizacion-mensaje");
          if (mensajeEl) mensajeEl.textContent = "Error al enviar el correo. Intenta nuevamente.";
        }
      } catch (error) {
        console.error("Error al enviar el formulario:", error);
        const mensajeEl = document.getElementById("modal-cotizacion-mensaje");
        if (mensajeEl) mensajeEl.textContent = "Error al enviar el correo. Intenta nuevamente.";
      }
      form.reset();
    };
  }

  function aplicarConfig() {
    const formContainer = document.getElementById("modal-form-container");
    const title = document.getElementById("modal-title");
    const btn = document.getElementById("modal-submit-btn");
    const buttonText = document.getElementById("modal-submit-btn");

    if (formContainer) {
      formContainer.classList.remove(
        "from-sky-400",
        "to-sky-600",
        "from-emerald-400",
        "to-teal-600",
        "from-violet-500",
        "to-indigo-700"
      );
      formContainer.classList.add(
        "bg-gradient-to-b",
        ...sectionConfig.gradient.split(" ")
      );
    }

    if (title) {
      title.innerHTML = sectionConfig.title;
    }

    if (btn) {
      btn.classList.remove(
        "bg-sky-400",
        "hover:bg-sky-500",
        "bg-emerald-400",
        "hover:bg-emerald-500",
        "bg-violet-500",
        "hover:bg-violet-600"
      );
      btn.classList.add(...sectionConfig.btn.split(" "), "text-white");
    }
    if (buttonText) {
      buttonText.textContent = sectionConfig.buttonText || "Enviar";
      buttonText.classList.add("font-bold");
    }
  }

  // --- MOSTRAR MODAL MANUALMENTE CON BOTÓN ---
  // Configurar los botones de cotización para abrir el modal
  function configurarBotonesCotizacion() {
    const botones = document.querySelectorAll('[id^="btnQuotation"]');
    botones.forEach((boton) => {
      boton.addEventListener("click", () => {
        showCotizacionModal();
      });
    });
  }

  // --- MOSTRAR EN SCROLL ---
  window.addEventListener("open-scroll-modal", showCotizacionModal);
  window.addEventListener("scroll", () => {
    // Mostrar modal después de hacer scroll del 30% de la página
    const scrollPercentage =
      (window.scrollY /
        (document.documentElement.scrollHeight - window.innerHeight)) *
      100;

    if (
      scrollPercentage > 30 &&
      !scrollActivado &&
      puedeMostrarModal() &&
      !modalMostrado
    ) {
      scrollActivado = true;
      showCotizacionModal();
    }
  });

  // --- ACTUALIZAR SECCIÓN DINÁMICAMENTE ---
  function updateSectionFromDataset() {
    const container = document.getElementById("modal-form-container");
    if (!container) return;

    const rawSection = container.dataset.seccion || "NEGOCIOS";
    const normalized = rawSection
      .normalize?.("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .toUpperCase();
    const keyMap = {
      NEGOCIOS: "NEGOCIOS",
      MAQUINARIA: "MAQUINARIA",
      DECORACION: "DECORACIÓN",
    } as const;

    const productoSeccion = (keyMap[normalized as keyof typeof keyMap] ||
      "NEGOCIOS") as keyof typeof secciones;
    sectionConfig = secciones[productoSeccion] || secciones.NEGOCIOS;

    aplicarConfig();
  }

  // observar cambios en data-seccion
  if (container) {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === "data-seccion") {
          updateSectionFromDataset();
        }
        if (mutation.attributeName === "data-product-link") {
          actualizarImagenDesdeLink();
        }
      });
    });

    observer.observe(container, {
      attributes: true,
      attributeFilter: ["data-seccion", "data-product-link"],
    });
  }

  // Inicializar
  document.addEventListener("DOMContentLoaded", function () {
    localStorage.removeItem('asesoriaModalLastClosedDetalle');

    updateSectionFromDataset();
    actualizarImagenDesdeLink();
    configurarBotonesCotizacion();
  });
</script>
